{"id":"node_modules/socket.io-parser/binary.js","dependencies":[{"name":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\package.json","includedInParent":true,"mtime":1595688552226},{"name":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\.babelrc","includedInParent":true,"mtime":1595516341597},{"name":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\node_modules\\socket.io-parser\\package.json","includedInParent":true,"mtime":1595676241665},{"name":"isarray","loc":{"line":7,"column":22},"parent":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\node_modules\\socket.io-parser\\binary.js","resolved":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\node_modules\\socket.io-parser\\node_modules\\isarray\\index.js"},{"name":"./is-buffer","loc":{"line":8,"column":20},"parent":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\node_modules\\socket.io-parser\\binary.js","resolved":"C:\\Study_File\\진행중인 프로젝트\\SnowFlake\\packages\\client\\node_modules\\socket.io-parser\\is-buffer.js"}],"generated":{"js":"/*global Blob,File*/\r\n\r\n/**\r\n * Module requirements\r\n */\r\n\r\nvar isArray = require('isarray');\r\nvar isBuf = require('./is-buffer');\r\nvar toString = Object.prototype.toString;\r\nvar withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');\r\nvar withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');\r\n\r\n/**\r\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\r\n * Anything with blobs or files should be fed through removeBlobs before coming\r\n * here.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @api public\r\n */\r\n\r\nexports.deconstructPacket = function(packet) {\r\n  var buffers = [];\r\n  var packetData = packet.data;\r\n  var pack = packet;\r\n  pack.data = _deconstructPacket(packetData, buffers);\r\n  pack.attachments = buffers.length; // number of binary 'attachments'\r\n  return {packet: pack, buffers: buffers};\r\n};\r\n\r\nfunction _deconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (isBuf(data)) {\r\n    var placeholder = { _placeholder: true, num: buffers.length };\r\n    buffers.push(data);\r\n    return placeholder;\r\n  } else if (isArray(data)) {\r\n    var newData = new Array(data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n      newData[i] = _deconstructPacket(data[i], buffers);\r\n    }\r\n    return newData;\r\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\r\n    var newData = {};\r\n    for (var key in data) {\r\n      newData[key] = _deconstructPacket(data[key], buffers);\r\n    }\r\n    return newData;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @api public\r\n */\r\n\r\nexports.reconstructPacket = function(packet, buffers) {\r\n  packet.data = _reconstructPacket(packet.data, buffers);\r\n  packet.attachments = undefined; // no longer useful\r\n  return packet;\r\n};\r\n\r\nfunction _reconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (data && data._placeholder) {\r\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n  } else if (isArray(data)) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[i] = _reconstructPacket(data[i], buffers);\r\n    }\r\n  } else if (typeof data === 'object') {\r\n    for (var key in data) {\r\n      data[key] = _reconstructPacket(data[key], buffers);\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Asynchronously removes Blobs or Files from data via\r\n * FileReader's readAsArrayBuffer method. Used before encoding\r\n * data as msgpack. Calls callback with the blobless data.\r\n *\r\n * @param {Object} data\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nexports.removeBlobs = function(data, callback) {\r\n  function _removeBlobs(obj, curKey, containingObject) {\r\n    if (!obj) return obj;\r\n\r\n    // convert any blob\r\n    if ((withNativeBlob && obj instanceof Blob) ||\r\n        (withNativeFile && obj instanceof File)) {\r\n      pendingBlobs++;\r\n\r\n      // async filereader\r\n      var fileReader = new FileReader();\r\n      fileReader.onload = function() { // this.result == arraybuffer\r\n        if (containingObject) {\r\n          containingObject[curKey] = this.result;\r\n        }\r\n        else {\r\n          bloblessData = this.result;\r\n        }\r\n\r\n        // if nothing pending its callback time\r\n        if(! --pendingBlobs) {\r\n          callback(bloblessData);\r\n        }\r\n      };\r\n\r\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\r\n    } else if (isArray(obj)) { // handle array\r\n      for (var i = 0; i < obj.length; i++) {\r\n        _removeBlobs(obj[i], i, obj);\r\n      }\r\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\r\n      for (var key in obj) {\r\n        _removeBlobs(obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  var pendingBlobs = 0;\r\n  var bloblessData = data;\r\n  _removeBlobs(bloblessData);\r\n  if (!pendingBlobs) {\r\n    callback(bloblessData);\r\n  }\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/socket.io-parser/binary.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/socket.io-parser/binary.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}}],"sources":{"node_modules/socket.io-parser/binary.js":"/*global Blob,File*/\r\n\r\n/**\r\n * Module requirements\r\n */\r\n\r\nvar isArray = require('isarray');\r\nvar isBuf = require('./is-buffer');\r\nvar toString = Object.prototype.toString;\r\nvar withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');\r\nvar withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');\r\n\r\n/**\r\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\r\n * Anything with blobs or files should be fed through removeBlobs before coming\r\n * here.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @api public\r\n */\r\n\r\nexports.deconstructPacket = function(packet) {\r\n  var buffers = [];\r\n  var packetData = packet.data;\r\n  var pack = packet;\r\n  pack.data = _deconstructPacket(packetData, buffers);\r\n  pack.attachments = buffers.length; // number of binary 'attachments'\r\n  return {packet: pack, buffers: buffers};\r\n};\r\n\r\nfunction _deconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (isBuf(data)) {\r\n    var placeholder = { _placeholder: true, num: buffers.length };\r\n    buffers.push(data);\r\n    return placeholder;\r\n  } else if (isArray(data)) {\r\n    var newData = new Array(data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n      newData[i] = _deconstructPacket(data[i], buffers);\r\n    }\r\n    return newData;\r\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\r\n    var newData = {};\r\n    for (var key in data) {\r\n      newData[key] = _deconstructPacket(data[key], buffers);\r\n    }\r\n    return newData;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @api public\r\n */\r\n\r\nexports.reconstructPacket = function(packet, buffers) {\r\n  packet.data = _reconstructPacket(packet.data, buffers);\r\n  packet.attachments = undefined; // no longer useful\r\n  return packet;\r\n};\r\n\r\nfunction _reconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (data && data._placeholder) {\r\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n  } else if (isArray(data)) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[i] = _reconstructPacket(data[i], buffers);\r\n    }\r\n  } else if (typeof data === 'object') {\r\n    for (var key in data) {\r\n      data[key] = _reconstructPacket(data[key], buffers);\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Asynchronously removes Blobs or Files from data via\r\n * FileReader's readAsArrayBuffer method. Used before encoding\r\n * data as msgpack. Calls callback with the blobless data.\r\n *\r\n * @param {Object} data\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nexports.removeBlobs = function(data, callback) {\r\n  function _removeBlobs(obj, curKey, containingObject) {\r\n    if (!obj) return obj;\r\n\r\n    // convert any blob\r\n    if ((withNativeBlob && obj instanceof Blob) ||\r\n        (withNativeFile && obj instanceof File)) {\r\n      pendingBlobs++;\r\n\r\n      // async filereader\r\n      var fileReader = new FileReader();\r\n      fileReader.onload = function() { // this.result == arraybuffer\r\n        if (containingObject) {\r\n          containingObject[curKey] = this.result;\r\n        }\r\n        else {\r\n          bloblessData = this.result;\r\n        }\r\n\r\n        // if nothing pending its callback time\r\n        if(! --pendingBlobs) {\r\n          callback(bloblessData);\r\n        }\r\n      };\r\n\r\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\r\n    } else if (isArray(obj)) { // handle array\r\n      for (var i = 0; i < obj.length; i++) {\r\n        _removeBlobs(obj[i], i, obj);\r\n      }\r\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\r\n      for (var key in obj) {\r\n        _removeBlobs(obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  var pendingBlobs = 0;\r\n  var bloblessData = data;\r\n  _removeBlobs(bloblessData);\r\n  if (!pendingBlobs) {\r\n    callback(bloblessData);\r\n  }\r\n};\r\n"},"lineCount":142}},"error":null,"hash":"9b14af7a48ca98678be6141b03625afd","cacheData":{"env":{}}}